#version 330 core

uniform int  color_offset;
uniform int  iters_cnt;
uniform vec2 rect_size;
uniform vec2 area_w;
uniform vec2 area_h;

out vec4 FragColor;

vec3 colors[139] = vec3[139](vec3(128,0,0), vec3(139,0,0), vec3(165,42,42), vec3(178,34,34),
                             vec3(220,20,60), vec3(255,0,0), vec3(255,99,71), vec3(255,127,80),
                            vec3(205,92,92), vec3(240,128,128), vec3(233,150,122), vec3(250,128,114),
                            vec3(255,160,122), vec3(255,69,0), vec3(255,140,0), vec3(255,165,0),
                            vec3(255,215,0), vec3(184,134,11), vec3(218,165,32), vec3(238,232,170),
                            vec3(189,183,107), vec3(240,230,140), vec3(128,128,0), vec3(255,255,0),
                            vec3(154,205,50), vec3(85,107,47), vec3(107,142,35), vec3(124,252,0),
                            vec3(127,255,0), vec3(173,255,47), vec3(0,100,0), vec3(0,128,0),
                            vec3(34,139,34), vec3(0,255,0), vec3(50,205,50), vec3(144,238,144),
                            vec3(152,251,152), vec3(143,188,143), vec3(0,250,154), vec3(0,255,127),
                            vec3(46,139,87), vec3(102,205,170), vec3(60,179,113), vec3(32,178,170),
                            vec3(47,79,79), vec3(0,128,128), vec3(0,139,139), vec3(0,255,255),
                            vec3(0,255,255), vec3(224,255,255), vec3(0,206,209), vec3(64,224,208),
                            vec3(72,209,204), vec3(175,238,238), vec3(127,255,212), vec3(176,224,230),
                            vec3(95,158,160), vec3(70,130,180), vec3(100,149,237), vec3(0,191,255),
                            vec3(30,144,255), vec3(173,216,230), vec3(135,206,235), vec3(135,206,250),
                            vec3(25,25,112), vec3(0,0,128), vec3(0,0,139), vec3(0,0,205), vec3(0,0,255),
                            vec3(65,105,225), vec3(138,43,226), vec3(75,0,130), vec3(72,61,139),
                            vec3(106,90,205), vec3(123,104,238), vec3(147,112,219), vec3(139,0,139),
                            vec3(148,0,211), vec3(153,50,204), vec3(186,85,211), vec3(128,0,128),
                            vec3(216,191,216), vec3(221,160,221), vec3(238,130,238), vec3(255,0,255),
                            vec3(218,112,214), vec3(199,21,133), vec3(219,112,147), vec3(255,20,147),
                            vec3(255,105,180), vec3(255,182,193), vec3(255,192,203), vec3(250,235,215),
                            vec3(245,245,220), vec3(255,228,196), vec3(255,235,205), vec3(245,222,179),
                            vec3(255,248,220), vec3(255,250,205), vec3(250,250,210), vec3(255,255,224),
                            vec3(139,69,19), vec3(160,82,45), vec3(210,105,30), vec3(205,133,63),
                            vec3(244,164,96), vec3(222,184,135), vec3(210,180,140), vec3(188,143,143),
                            vec3(255,228,181), vec3(255,222,173), vec3(255,218,185), vec3(255,228,225),
                            vec3(255,240,245), vec3(250,240,230), vec3(253,245,230), vec3(255,239,213),
                            vec3(255,245,238), vec3(245,255,250), vec3(112,128,144), vec3(119,136,153),
                            vec3(176,196,222), vec3(230,230,250), vec3(255,250,240), vec3(240,248,255),
                            vec3(248,248,255), vec3(240,255,240), vec3(255,255,240), vec3(240,255,255),
                            vec3(255,250,250), vec3(0,0,0), vec3(105,105,105), vec3(128,128,128),
                            vec3(169,169,169), vec3(192,192,192), vec3(211,211,211), vec3(220,220,220),
                            vec3(245,245,245), vec3(255,255,255)
);

vec3 to_float(vec3 other) {
    return vec3(other.x / 255.0f, other.y / 255.0f, other.z / 255.0f);
}

void main() {
    float cx = gl_FragCoord.x * (area_w.y - area_w.x) / rect_size.x + area_w.x;
    float cy = gl_FragCoord.y * (area_h.y - area_h.x) / rect_size.y + area_h.x;
    vec2 c = vec2(cx,   cy);
    vec2 z = vec2(0.0f, 0.0f);
    float x, y;
    x = 0; y = 0;
    int i = 0;
    for (; i < iters_cnt && (x * x + y * y <= 4.0); ++i) {
        x = z.x * z.x - z.y * z.y + c.x;
        y = 2.0f * z.x * z.y + c.y;
        z.x = x; z.y = y;
    }
    int row = (i * 103 / iters_cnt % 139);
    if (i == iters_cnt) {
        FragColor = vec4(vec3(0.0f), 1.0);
    } else {
        FragColor = vec4(to_float(colors[(row + color_offset) % 139]), 1.0);
    }
}
